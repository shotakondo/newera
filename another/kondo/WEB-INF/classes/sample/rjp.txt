〇タスク一覧
・新規登録
・ログイン
・ログアウト
・カテゴリ検索（値段、色、タイプで指定）
・ワード検索
・カテゴリ表示（必要最低限の数を表示する）
・商品絞り込み
・商品並べ替え
・お客様情報の表示、変更
・パスワードの変更
・退会処理
・お気に入り表示、追加、削除
・注文履歴表示
・カート表示、追加、削除（商品の名前［色、タイプ］、在庫状況、数量、単価、小計、すべてこみこみ、削除）
・購入手続き
・注文内容表示
・パスワードリマインダー
・商品の追加、削除、変更
・NGユーザー追加、削除
・売り上げ表示
・クラス図作成
・シーケンス図作成
・ユースケース図作成
・E-R図作成
・DB定義書作成
・Table作成
・Sequence作成
・試作Command作成
・試作Factory作成
・サイト画像の収集
・開発環境の確認

〇ニトリのサイトから省く機能
・部屋の種類からの検索
・ＰＲページ
・おすすめ商品
・第二カテゴリ
・ＳＮＳ連携
・店舗検索
・閲覧履歴
・ランキング
・企業サイト
・ご利用ガイド
・お問い合わせ
・住所の分割
・電話番号の分割
・カナ表示の氏名
・家屋状況
・エレベーター
・メルマガ配信
・お届け先編集、追加
・レビュー投稿、閲覧
・タイプの区別
・件数表示
・おすすめ順
・値段検索リスト
・件数表示指定

〜〜〜〜〜決めなきゃいけないこと　成果物編〜〜〜〜〜
〇どこのサイトをまねするか？
https://www.nitori-net.jp/store/ja/ec/
ニトリのサイトのめんどくさいところを省いて作る

〇そのサイトを再現するために機能を洗い出す
ーユーザーサイドー
・新規登録
・ログイン
・ログアウト
・カテゴリ検索（値段、色、タイプで指定）
・ワード検索
・カテゴリ表示（必要最低限の数を表示する）
・商品絞り込み
・商品並べ替え
・お客様情報の表示、変更
・パスワードの変更
・退会処理
・お気に入り表示、追加、削除
・注文履歴表示
・カート表示、追加、削除（商品の名前［色、タイプ］、在庫状況、数量、単価、小計、すべてこみこみ、削除）
・購入手続き
・注文内容表示
・パスワードリマインダー

ークライアントサイドー
・商品の追加、削除、変更
・NGユーザー追加、削除
・売り上げ表示

〇その機能を実現するために、データをどのように管理するか→DB設計へ
ー商品情報ー
・商品ID
・商品メインID
・商品カテゴリーID
・商品カラーID
・商品タイプID
・商品名
・値段

ーメイン商品ー
・メイン商品ID
・メイン商品名
・メイン商品画像

ーユーザー情報ー
・ユーザーID
・姓
・名
・メールアドレス
・パスワード
・電話番号
・郵便番号
・住所（都道府県、市区町村、町域名、丁目以降、建物名称、部屋番号）
・性別
・生年月日
・NG
・管理者

ー表示商品情報ー
・表示商品ID
・表示画像ID

ー表示カテゴリ情報ー
・表示カテゴリーID
・表示カラーID
・表示タイプID

ー画像情報ー
・画像ID
・画像名
・画像URL

ーカテゴリー情報ー
・カテゴリーID
・カテゴリー画像ID
・カテゴリー名

ーカラー情報ー
・カラーID
・カラー画像ID
・カラー名

ータイプ情報ー
・タイプID
・タイプ画像ID
・タイプ名

ー注文履歴情報ー
・注文履歴ID
・注文履歴ユーザーID
・注文日付
・注文合計

ー明細情報ー
・明細注文ID
・明細商品ID
・明細個数
・明細小計

ー在庫情報ー
・在庫商品ID
・在庫数

ーお気に入り情報ー
・お気に入りユーザーID
・お気に入り商品ID

〇その機能を実現するために、どのような実装が必要か？JSのライブラリ？
・郵便番号から住所を登録するライブラリ（https://github.com/yubinbango/yubinbango）

〇設計でいえば、DB設計とユースケースは早期に作成→クラス図は4期の授業進行次第

〇サイト内での例外の定義
・例外はアラートで対処

〇動作環境→全チームでそろえるほうがおすすめ
・決定済み


〜〜〜〜〜決めなきゃいけないこと　環境編・作業編〜〜〜〜〜
〇Gitのプロジェクト作成
・作成済み

〇エディタで開発するかIDEで開発するか？
エクリプス

〇チーム内でのコーディング規約（Java標準でやるのが一応おすすめ）
https://future-architect.github.io/coding-standards/documents/forJava/Java%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E8%A6%8F%E7%B4%84.html

ー参考例ー
大文字・小文字の違いで名前を区別しない。
パッケージ名はすべて小文字にする
パッケージ名は意味のある名前にする
サブパッケージ名の重複は可能
インターフェース名はクラス名に準ずる
クラス名は単語の先頭を大文字にする
コンストラクタと同じ名前のメソッドはつくらない
メソッド名は区切りのみ大文字にする
変換メソッド名は「"to"+オブジェクト名」にする
ゲッターメソッド名は「"get"+属性名」にする
型がbooleanの場合は「"is"+属性名」にする
セッターメソッド名は「"set"+属性名」にする
boolean変数を返すメソッド名はtrue/falseの状態がわかるようにする
メソッドのパラメータ名とインスタンス変数名を一緒にしない
ただし、アクセサメソッドやコンストラクタなど、統合開発環境の機能により自動生成するものに関しては可とする。
アンダースコア　_　をつけての区別は原則禁止とする。
boolean変数はtrue/false の状態がわかるようにする
定数は全てstatic finalとし、すべて大文字、区切りは"_"
変数名は小文字とし、単語の区切りのみ大文字にする
変数名に固有名詞が含まれる場合、先頭をのぞき、単語の区切り以外に大文字を使用してもよい
スコープが狭い変数名は省略した名前でもよい
for 文のループカウンタは、ネストごとに"i","j","k"・・・を使う
原則としてオブジェクトの参照にはインターフェースを利用する
オブジェクトを参照する際は、そのオブジェクトの実装クラスを用いて宣言できるが、実装クラスに適切な
インターフェースが存在している場合は、必ずインターフェースを用いて宣言すること。
推奨されないAPI を使用しない
アノテーション@Deprecatedで指定されたメソッドは利用しないこと。
使われないコードは書かない
宣言は適切な権限で行うこと（public, protected, private）
final を適切に利用する
継承されないクラス、オーバーライドされないメソッド、
値の変わらない変数（つまり定数）等、変化のないもの/変化させたくないものについてはfinal で宣言する。
インデントは空白文字4文字分のTabを使用する
長すぎる行は避ける
{ の後にステートメントを記述しない
行に2つ以上のステートメントを記述しない
カンマの後には空白文字
代入演算子（ = , += , -= , …）の前後には空白文字を挿入する
for 文内のセミコロンの後には空白文字を挿入する
++ や -- とオペランドの間には空白文字を入れない
ビット演算子（ | 、 & 、 ^ 、 << 、 >> ）の前後には空白文字を挿入する
論理演算子（ || 、&&）の前後には空白文字を挿入する
関係演算子（ < 、 > 、 >= 、 <=、==、 != ）の前後には空白文字を挿入する
算術演算子（ ＋ 、 − 、 ＊ 、 / 、 % ）の前後には空白文字を挿入する
return文ではカッコを使わない
ifなどの条件式でbooleanの変数を比較しない
不等号の向きは左向き（ < 、 <= ）にする

〇コード内のコメントの書き方ルール→ここからは変更履歴を入れるのがおすすめ
・更新した日付と名前を先頭に書く
・コメントは必要なものだけを簡潔に
・不要なコメントは記載しない
・コードからすぐわかること・冗長なコメントは書かない
・名前の説明などコメントではなくわかりやすい名前を付ける。
・別システムで管理している内容はコメントを記載する必要はない